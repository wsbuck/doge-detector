{"version":3,"sources":["dog.jpg","components/ImageContainer.js","components/Input.js","components/PredictionOutput.js","components/InfoButton.js","components/Header.js","serviceWorker.js","ui/theme/index.js","index.js","App.js"],"names":["module","exports","__webpack_require__","p","useStyles","makeStyles","theme","root","padding","spacing","marginLeft","marginRight","marginTop","marginBottom","background","maxWidth","ImageContainer","props","snapShotCanvas","document","createElement","classes","image","cameraStatus","vid","querySelector","video","navigator","mediaDevices","getUserMedia","audio","facingMode","then","stream","srcObject","catch","error","console","log","startStream","currentStream","height","videoHeight","width","videoWidth","getContext","drawImage","img","toDataURL","getTracks","forEach","track","stop","getImage","stopStream","react_default","a","Paper","className","color","alt","autoPlay","playsInline","src","text","appBar","justifyContent","display","top","bottom","grow","flexGrow","fabButton","zIndex","margin","Input","modelLoaded","Fragment","AppBar","position","Toolbar","Fab","aria-label","onClick","updateCamera","PhotoCamera_default","predict","disabled","Pets_default","CircularProgress","PredictionOutput","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","prediction","map","value","index","key","parseFloat","probability","toFixed","Component","InfoButton","_React$useState","React","useState","_React$useState2","slicedToArray","open","setOpen","handleClose","IconButton","Info_default","Dialog","onClose","aria-labelledby","aria-describedby","DialogTitle","id","DialogContent","DialogContentText","href","DialogActions","Button","title","Header","Typography","variant","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","createMuiTheme","palette","primary","main","secondary","default","MuiPaper","themeName","ReactDOM","render","ThemeProvider","CssBaseline","_useState","doggo","_useState2","setImage","_useState3","_useState4","setCameraStatus","_useState5","_useState6","modelStatus","setModelStatus","_useState7","_useState8","model","setModel","_useState9","_useState10","setPrediction","_loadModel","asyncToGenerator","regenerator_default","mark","_callee","result","wrap","_context","prev","next","tf","sent","t0","save","data","dispose","abrupt","apply","arguments","getTopKClasses","_x","_x2","_getTopKClasses","_callee2","logits","topK","values","valuesAndIndices","i","topKValues","topKIndices","_i","topClassesAndProbs","percentageSum","_i2","_context2","length","push","sort","b","Float32Array","Int32Array","outputClasses","_predict","_callee3","imgElement","_context3","fromPixels","resizeNearestNeighbor","toFloat","offset","batched","sub","div","reshape","useEffect","loadModel","loadedModel","components_PredictionOutput","getElementById","URL","process","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.73f98558.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/dog.1afd5e79.jpg\";","import React, { useState, Component } from 'react';\n\nimport { Paper } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\n\n\n// class ImageContainer extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       currentStream: null\n//     };\n//     this.startStream = this.startStream.bind(this);\n//     this.stopStream = this.stopStream.bind(this);\n//     this.currentStream = null;\n//     this.snapShotCanvas = document.createElement('canvas');\n//     this.IMAGE_WIDTH = 300;\n//     this.IMAGE_HEIGHT = 300;\n//     this.image = this.props.image;\n//   }\n\n//   componentWillUpdate() {\n//     // const { image } = this.props;\n//     const { camera } = this.props;\n//     if (camera) {\n//       this.startStream();\n//     } else {\n//       this.stopStream();\n//     }\n//   }\n\n//   startStream() {\n//     var constraints = {\n//       audio: false,\n//       video: { facingMode: 'environment' }\n//     };\n//     const video = document.querySelector('video');\n//     navigator.mediaDevices\n//       .getUserMedia(constraints)\n//       .then(stream => {\n//         this.currentStream = stream;\n//         video.srcObject = stream;\n//         return stream;\n//       })\n//       .catch(error => {\n//         console.log(error);\n//       })\n//   }\n\n//   stopStream() {\n//     if (this.currentStream) {\n//       const video = document.querySelector('video');\n//       this.snapShotCanvas.height = video.videoWidth;\n//       this.snapShotCanvas.width = video.videoHeight;\n//       this.snapShotCanvas.height = this.IMAGE_HEIGHT;\n//       this.snapShotCanvas.width = this.IMAGE_WIDTH;\n//       this.snapShotCanvas.getContext('2d').drawImage(\n//         video,\n//         0,\n//         0,\n//         this.snapShotCanvas.width, this.snapShotCanvas.height)\n//       let img = this.snapShotCanvas.toDataURL(\"image/png\");\n//       //this.props.getImage(this.snapShotCanvas.toDataURL(\"image/webp\"));\n//       this.currentStream.getTracks().forEach(track => {\n//         track.stop();\n//       });\n//       this.currentStream = null;\n//       this.props.getImage(img);\n//     }\n//   }\n\n//   render() {\n//     // const { image } = this.props;\n//     // const { camera } = this.props;\n//     // if (camera) {\n//     //   this.startStream();\n//     // } else {\n//     //   this.stopStream();\n//     // }\n\n//     return (\n//       <div className=\"doggo-image-container\">\n//         <video\n//           alt=\"doggo\"\n//           className={this.props.camera ? \"doggo-image\" : \"hidden\"}\n//           autoPlay\n//           playsInline\n//         />\n//         <img src={this.props.image} alt=\"doggo\" className=\"doggo-image\" />\n//       </div>\n//     )\n//   }\n// }\n\n// export default ImageContainer;\n\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    padding: theme.spacing(1),\n    marginLeft: 'auto',\n    marginRight: 'auto',\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n    background: '#37474f',\n    maxWidth: '600px',\n  },\n}));\n\nexport default function ImageContainer(props) {\n  const snapShotCanvas = document.createElement('canvas');\n  const IMAGE_WIDTH = 300;\n  const IMAGE_HEIGHT = 300;\n  // const [currentStream, setCurrentStream] = useState(null);\n  let currentStream = null;\n  const classes = useStyles();\n\n  function startStream() {\n    var constraints = {\n      audio: false,\n      video: { facingMode: 'environment' }\n    };\n    const video = document.querySelector('video');\n    navigator.mediaDevices\n      .getUserMedia(constraints)\n      .then(stream => {\n        // setCurrentStream(stream);\n        currentStream = stream;\n        video.srcObject = stream;\n        return stream;\n      })\n      .catch(error => {\n        console.log(error);\n      })\n  }\n\n  function stopStream(vid) {\n    if (vid.srcObject) {\n      const currentStream = vid.srcObject;\n      console.log('ok');\n      snapShotCanvas.height = vid.videoHeight;\n      snapShotCanvas.width = vid.videoWidth;\n      // snapShotCanvas.height = IMAGE_HEIGHT;\n      // snapShotCanvas.width = IMAGE_WIDTH;\n      snapShotCanvas.getContext('2d').drawImage(\n        vid,\n        0,\n        0,\n        snapShotCanvas.width,\n        snapShotCanvas.height\n      )\n      let img = snapShotCanvas.toDataURL(\"image/png\");\n      currentStream.getTracks().forEach(track => {\n        track.stop();\n      });\n      vid.srcObject = null;\n      props.getImage(img);\n    }\n  }\n\n  const { image, cameraStatus } = props;\n  const vid = document.querySelector('video');\n\n  if (cameraStatus) {\n    startStream(vid);\n  } else if (vid) {\n    stopStream(vid);\n  }\n\n\n  return (\n    <Paper className={classes.root} color='primary'>\n      <video\n        alt=\"doggo\"\n        className={cameraStatus ? \"doggo-images\" : \"hidden\"}\n        autoPlay\n        playsInline\n      />\n      <img \n        src={image} alt=\"doggo\" \n        className={!cameraStatus ? \"doggo-images\" : \"hidden\"}\n      />\n    </Paper>\n    // <div className=\"doggo-image-container\">\n    //   <video\n    //     alt=\"doggo\"\n    //     className={cameraStatus ? \"doggo-image\" : \"hidden\"}\n    //     autoPlay\n    //     playsInline\n    //   />\n    //   <img src={image} alt=\"doggo\" className=\"doggo-image\" />\n    // </div>\n  );\n}","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Fab from '@material-ui/core/Fab';\nimport PhotoCamera from '@material-ui/icons/PhotoCamera';\nimport Pets from '@material-ui/icons/Pets';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\n// import { isInWebAppiOS, isiOS, isSafari } from '../utils';\n\nconst useStyles = makeStyles(theme => ({\n  text: {\n    padding: theme.spacing(2, 2, 0),\n  },\n  appBar: {\n    justifyContent: 'center',\n    display: 'grid',\n    top: 'auto',\n    bottom: 0,\n    padding: 0,\n    height: '6%',\n  },\n  grow: {\n    flexGrow: 1,\n  },\n  fabButton: {\n    display: 'grid',\n    zIndex: 1,\n    top: -30,\n    margin: theme.spacing(2),\n  },\n}));\n\nexport default function Input(props) {\n  const classes = useStyles();\n  const { modelLoaded, cameraStatus } = props;\n  \n  // function handleImage(event) {\n  //   props.getImage(URL.createObjectURL(event.target.files[0]))\n  // }\n\n  function handlePredict() {\n    if (!cameraStatus) {\n      props.predict()\n    }\n  }\n\n  function handleCamera() {\n    props.updateCamera(!cameraStatus);\n  }\n\n  return (\n    <>\n      <AppBar position='fixed' color='primary' className={classes.appBar}>\n        <Toolbar>\n          <Fab \n            color=\"secondary\" aria-label=\"add\" \n            className={classes.fabButton} onClick={handleCamera}\n          >\n            <PhotoCamera />\n          </Fab>\n          <Fab \n            color=\"secondary\" aria-label=\"add\" \n            className={classes.fabButton} onClick={handlePredict}\n            disabled={!modelLoaded}\n          >\n            {modelLoaded ? <Pets /> : <CircularProgress color=\"secondary\" />}\n          </Fab>\n          <div className={classes.grow} />\n        </Toolbar>\n      </AppBar>\n    </>\n  )\n}","import React, { Component } from 'react';\n\nclass PredictionOutput extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  createTable() {\n\n  }\n\n  render() {\n    const { prediction } = this.props;\n    return (\n      prediction\n        ? (\n          <div className={prediction ? \"card\" : \"hidden\"}>\n            <table>\n              <tbody>\n                {prediction.map((value, index) => {\n                  return (\n                    <tr key={index}>\n                      <th className=\"pred-object\">{value.className}</th>\n                      <th className=\"pred-percent\">\n                        {parseFloat(value.probability * 10000 / 100).toFixed(2)}%\n                        </th>\n                    </tr>\n                  )\n                })}\n              </tbody>\n            </table>\n          </div >\n        )\n        : \"\"\n    )\n  }\n}\n\nexport default PredictionOutput;","import React from 'react';\n\nimport { DialogTitle, DialogActions } from '@material-ui/core';\nimport { DialogContent, DialogContentText } from '@material-ui/core';\nimport { Dialog, Button } from '@material-ui/core';\nimport { IconButton } from '@material-ui/core';\n\nimport Info from '@material-ui/icons/Info';\n\nexport default function InfoButton() {\n  const [open, setOpen] = React.useState(false);\n  // const classes = useStyles();\n\n  function handleClickOpen() {\n    setOpen(true);\n  }\n\n  function handleClose() {\n    setOpen(false);\n  }\n\n  return (\n    <div>\n      <IconButton\n        color='secondary' aria-label='Information'\n        onClick={handleClickOpen}\n      >\n        <Info />\n      </IconButton>\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        aria-labelledby='alert-dialog-title'\n        aria-describedby='alert-dialog-description'\n      >\n        <DialogTitle id='alert-dialog-title'>Hello!</DialogTitle>\n        <DialogContent>\n          <DialogContentText id='alert-dialog-description'>\n            This is made with tensorflow.js and React.\n            The model is mobilenet retrained only on the dogs of ImageNet.\n            The code for this project can be found <a href=\"https://github.com/wsbuck/doge-detector\">here</a> and the tensorflow model is <a href=\"https://github.com/wsbuck/DogeNetTFModel\">here</a>.\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color='primary'>\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { AppBar, Toolbar, Typography } from '@material-ui/core';\n\nimport InfoButton from './InfoButton';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  appBar: {\n    // backgroundColor: '#ec6c03',\n  },\n  title: {\n    flexGrow: 1,\n    marginLeft: theme.spacing(2),\n  },\n}));\n\nexport default function Header() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar className={classes.appBar} position='static' color='primary'>\n        <Toolbar>\n          <Typography variant='h6' color='inherit' className={classes.title}>\n            Doge Detector\n          </Typography>\n          <InfoButton />\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createMuiTheme } from '@material-ui/core/styles';\n\nconst palette = {\n  primary: { main: '#37474f' },\n  secondary: { main: '#FFAB91' },\n  background: { default: '#102027' },\n  MuiPaper: { color: '#37474f' },\n};\nconst themeName = 'Cutty Sark Mona Lisa Ostracod';\n\nexport default createMuiTheme({ palette, themeName });","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { ThemeProvider } from '@material-ui/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nimport theme from './ui/theme';\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    <CssBaseline />\n    <App />\n  </ThemeProvider >\n  , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\nserviceWorker.register();","import React, { Component, useState, useEffect } from 'react';\nimport './App.css';\nimport doggo from './dog.jpg'\nimport outputClasses from './tfjs/outputClasses.json';\n\nimport * as tf from '@tensorflow/tfjs';\n\nimport ImageContainer from './components/ImageContainer';\nimport Input from './components/Input';\nimport PredictionOutput from './components/PredictionOutput';\nimport Header from './components/Header';\n\nimport useCamera from './hooks/useCamera';\n\n\nexport default function App() {\n  const [image, setImage] = useState(doggo);\n  const [cameraStatus, setCameraStatus] = useState(false);\n  const [modelStatus, setModelStatus] = useState(false);\n  const [model, setModel] = useState(null);\n  const [prediction, setPrediction] = useState(null);\n  \n  useEffect(() => {\n    loadModel()\n      .then((loadedModel => {\n        setModel(loadedModel);\n        setModelStatus(true);\n      }))\n  }, []);\n\n  async function loadModel() {\n    let model;\n    try {\n      model = await tf.loadLayersModel('indexeddb://model');\n      console.log('model loaded');\n    } catch(err) {\n      const modelURL = \"https://s3-us-west-1.amazonaws.com/wsbuck/tfjs/model.json\";\n      model = await tf.loadLayersModel(modelURL);\n      const saveResult = await model.save('indexeddb://model');\n    }\n    const result = tf.tidy(() => model.predict(tf.zeros([1, 224, 224, 3])));\n    await result.data();\n    result.dispose();\n    return model;\n  }\n\n  function getImage(img) {\n    setImage(img);\n  }\n\n  function preprocessImage(img) {\n    let tensor = tf.browser.fromPixels(img)\n      .resizeNearestNeighbor([224, 224])\n      .toFloat();\n\n    let offset = tf.scalar(127.5);\n    return tensor.sub(offset)\n      .div(offset)\n      .expandDims();\n  }\n\n  async function getTopKClasses(logits, topK) {\n    const values = await logits.data();\n    const valuesAndIndices = [];\n    for (let i = 0; i < values.length; i++) {\n      valuesAndIndices.push({ value: values[i], index: i});\n    }\n\n    valuesAndIndices.sort((a, b) => {\n      return b.value - a.value;\n    });\n    const topKValues = new Float32Array(topK);\n    const topKIndices = new Int32Array(topK);\n    for (let i = 0; i < topK; i++) {\n      topKValues[i] = valuesAndIndices[i].value;\n      topKIndices[i] = valuesAndIndices[i].index;\n    }\n\n    const topClassesAndProbs = [];\n    let percentageSum = 0.00;\n    for (let i = 0; i < topKIndices.length; i++) {\n      percentageSum += topKValues[i];\n      topClassesAndProbs.push({\n        className: outputClasses[topKIndices[i]],\n        probability: topKValues[i]\n      });\n    }\n    topClassesAndProbs.push({\n      className: \"Other\",\n      probability: 1.00 - percentageSum\n    });\n    return topClassesAndProbs;\n  }\n\n  async function predict() {\n    const imgElement = document.querySelector('img');\n    const logits = tf.tidy(() => {\n      // tf.browser.fromPixels() returns a Tensor from an image element.\n      const img = tf.browser.fromPixels(imgElement)\n        .resizeNearestNeighbor([224, 224])\n        .toFloat();\n      const offset = tf.scalar(127.5);\n      // Normalize the image from [0, 255] to [-1, 1].\n      const normalized = img.sub(offset).div(offset);\n      // Reshape to a single-element batch so we can pass it to predict.\n      const batched = normalized.reshape([1, 224, 224, 3]);\n      // Make a prediction through mobilenet.\n      console.log(model);\n      return model.predict(batched);\n    });\n    const classes = await getTopKClasses(logits, 3);\n    setPrediction(classes);\n  }\n  \n  return (\n    <div className=\"App\">\n      <Header />\n      <ImageContainer\n        image={image}\n        cameraStatus={cameraStatus}\n        getImage={getImage}\n      />\n      <PredictionOutput\n        prediction={prediction}\n      />\n      <Input\n        updateCamera={setCameraStatus}\n        cameraStatus={cameraStatus}\n        predict={predict}\n        modelLoaded={modelStatus}\n        getImage={getImage}\n      />\n    </div>\n  );\n}\n\n// class App extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       image: doggo,\n//       cameraStatus: false,\n//       modelLoaded: false,\n//       prediction: null\n//     };\n//     this.updateCamera = this.updateCamera.bind(this);\n//     this.getImage = this.getImage.bind(this);\n//     this.predict = this.predict.bind(this);\n//     this.loadModel = this.loadModel.bind(this);\n//   }\n\n//   componentDidMount() {\n//     this.loadModel();\n//   }\n\n//   updateCamera(data) {\n//     this.setState({ cameraStatus: data })\n//   }\n\n//   async loadModel() {\n//     this.outputClasses = outputClasses;\n//     this.model = await tf.loadLayersModel(\"https://s3-us-west-1.amazonaws.com/wsbuck/tfjs/model.json\");\n//     this.setState({ modelLoaded: true });\n//     const result = tf.tidy(\n//       () => this.model.predict(tf.zeros(\n//         [1, 224, 224, 3])));\n//     await result.data();\n//     result.dispose();\n//   }\n\n//   getImage(img) {\n//     this.setState({ image: img })\n//   }\n\n//   preprocessImage(img) {\n//     let tensor = tf.browser.fromPixels(img)\n//       .resizeNearestNeighbor([224, 224])\n//       .toFloat();\n\n//     let offset = tf.scalar(127.5);\n//     return tensor.sub(offset)\n//       .div(offset)\n//       .expandDims();\n\n//   }\n\n//   async getTopKClasses(logits, topK) {\n//     const values = await logits.data();\n\n//     const valuesAndIndices = [];\n//     for (let i = 0; i < values.length; i++) {\n//       valuesAndIndices.push({ value: values[i], index: i });\n//     }\n//     valuesAndIndices.sort((a, b) => {\n//       return b.value - a.value;\n//     });\n//     const topkValues = new Float32Array(topK);\n//     const topkIndices = new Int32Array(topK);\n//     for (let i = 0; i < topK; i++) {\n//       topkValues[i] = valuesAndIndices[i].value;\n//       topkIndices[i] = valuesAndIndices[i].index;\n//     }\n\n//     const topClassesAndProbs = [];\n//     let percentageSum = 0.00;\n//     for (let i = 0; i < topkIndices.length; i++) {\n//       percentageSum += topkValues[i];\n//       topClassesAndProbs.push({\n//         className: this.outputClasses[topkIndices[i]],\n//         probability: topkValues[i]\n//       })\n//     }\n//     topClassesAndProbs.push({\n//       className: \"Other\",\n//       probability: 1.00 - percentageSum\n//     });\n//     return topClassesAndProbs;\n//   }\n\n//   async predict() {\n//     const imgElement = document.querySelector('img');\n//     const logits = tf.tidy(() => {\n//       // tf.browser.fromPixels() returns a Tensor from an image element.\n//       const img = tf.browser.fromPixels(imgElement)\n//         .resizeNearestNeighbor([224, 224])\n//         .toFloat();\n//       const offset = tf.scalar(127.5);\n//       // Normalize the image from [0, 255] to [-1, 1].\n//       const normalized = img.sub(offset).div(offset);\n//       // Reshape to a single-element batch so we can pass it to predict.\n//       const batched = normalized.reshape([1, 224, 224, 3]);\n//       // Make a prediction through mobilenet.\n//       return this.model.predict(batched);\n//     });\n//     const classes = await this.getTopKClasses(logits, 3);\n//     this.setState({ prediction: classes })\n//     //console.log(classes);\n//   }\n\n//   render() {\n//     return (\n//       <div className=\"App\">\n//         <Header />\n//         <ImageContainer\n//           image={this.state.image}\n//           cameraStatus={this.state.cameraStatus}\n//           getImage={this.getImage}\n//         />\n//         <PredictionOutput\n//           prediction={this.state.prediction}\n//         />\n//         <Input\n//           updateCamera={this.updateCamera}\n//           cameraStatus={this.state.cameraStatus}\n//           predict={this.predict}\n//           modelLoaded={this.state.modelLoaded}\n//           getImage={this.getImage}\n//         />\n//       </div>\n//     );\n//   }\n// }\n\n// export default App;"],"sourceRoot":""}