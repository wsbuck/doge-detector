{"version":3,"sources":["components/ImageContainer.js","components/Input.js","components/PredictionOutput.js","App.js","serviceWorker.js","index.js","dog.jpg"],"names":["ImageContainer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","currentStream","startStream","bind","assertThisInitialized","stopStream","snapShotCanvas","document","createElement","IMAGE_WIDTH","IMAGE_HEIGHT","_this2","video","querySelector","navigator","mediaDevices","getUserMedia","audio","facingMode","then","stream","srcObject","catch","error","console","log","height","videoWidth","width","videoHeight","getContext","drawImage","img","toDataURL","getTracks","forEach","track","stop","getImage","image","camera","react_default","a","className","alt","autoPlay","playsInline","src","Component","Input","event","URL","createObjectURL","target","files","modelLoaded","ua","window","userAgent","match","isiOS","iOS","webkit","isSafari","standalone","Fragment","type","id","accept","capture","onChange","handleImage","htmlFor","onClick","onTouchStart","updateCamera","predict","disabled","PredictionOutput","prediction","map","value","index","key","parseFloat","probability","toFixed","App","doggo","loadModel","data","setState","outputClasses","tf","model","result","dispose","tensor","fromPixels","resizeNearestNeighbor","toFloat","offset","sub","div","expandDims","logits","topK","values","valuesAndIndices","i","length","push","sort","b","topkValues","Float32Array","topkIndices","Int32Array","topClassesAndProbs","percentageSum","imgElement","batched","reshape","_this3","getTopKClasses","classes","components_ImageContainer","components_PredictionOutput","components_Input","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","src_App_0","getElementById","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.1bf3a842.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass ImageContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentStream: null\n    };\n    this.startStream = this.startStream.bind(this);\n    this.stopStream = this.stopStream.bind(this);\n    this.currentStream = null;\n    this.snapShotCanvas = document.createElement('canvas');\n    this.IMAGE_WIDTH = 300;\n    this.IMAGE_HEIGHT = 300;\n  }\n\n  //componentWillUpdate() {\n  //  console.log('updated');\n  //}\n\n  startStream() {\n    var constraints = {\n      audio: false,\n      video: { facingMode: 'environment' }\n    };\n    const video = document.querySelector('video');\n    navigator.mediaDevices\n      .getUserMedia(constraints)\n      .then(stream => {\n        this.currentStream = stream;\n        video.srcObject = stream;\n        return stream;\n      })\n      .catch(error => {\n        console.log(error);\n      })\n  }\n\n  stopStream() {\n    if (this.currentStream) {\n      const video = document.querySelector('video');\n      this.snapShotCanvas.height = video.videoWidth;\n      this.snapShotCanvas.width = video.videoHeight;\n      this.snapShotCanvas.height = this.IMAGE_HEIGHT;\n      this.snapShotCanvas.width = this.IMAGE_WIDTH;\n      this.snapShotCanvas.getContext('2d').drawImage(\n        video,\n        0,\n        0,\n        this.snapShotCanvas.width, this.snapShotCanvas.height)\n      let img = this.snapShotCanvas.toDataURL(\"image/png\");\n      //this.props.getImage(this.snapShotCanvas.toDataURL(\"image/webp\"));\n      this.currentStream.getTracks().forEach(track => {\n        track.stop();\n      });\n      this.currentStream = null;\n      this.props.getImage(img);\n    }\n  }\n\n  render() {\n    const { image } = this.props;\n    const { camera } = this.props;\n    if (camera) {\n      this.startStream();\n    } else {\n      this.stopStream();\n    }\n\n    return (\n      <div className=\"doggo-image-container\">\n        <video\n          alt=\"doggo\"\n          className={camera ? \"doggo-image\" : \"hidden\"}\n          autoPlay\n          playsInline\n        />\n        <img src={image} alt=\"doggo\" className=\"doggo-image\" />\n      </div>\n    )\n  }\n}\n\nexport default ImageContainer;","import React, { Component } from 'react';\n\nclass Input extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  handleImage(event) {\n    this.props.getImage(URL.createObjectURL(event.target.files[0]))\n  }\n\n  render() {\n    const { camera } = this.props;\n    let { modelLoaded } = this.props;\n    //let isInWebAppiOS = (window.navigator.standalone === true);\n    const isInWebAppiOS = () => ('standalone' in window.navigator) && (window.navigator.standalone);\n    const isSafari = () => {\n      const ua = window.navigator.userAgent;\n      const iOS = !!ua.match(/iPad/i) || !!ua.match(/iPhone/i);\n      var webkit = !!ua.match(/WebKit/i);\n      var iOSSafari = iOS && webkit && !ua.match(/CriOS/i);\n      return iOSSafari;\n    }\n    const isiOS = () => {\n      const ua = window.navigator.userAgent;\n      return (!!ua.match(/iPad/i) || !!ua.match(/iPhone/i))\n    }\n\n    //console.log(isiOS());\n    //console.log(isInWebAppiOS());\n    //console.log(isSafari());\n\n    return (\n      <div className=\"input-container\">\n        {\n          //(!isInWebAppiOS() || isSafari())\n          (!isiOS() || (isSafari() && !isInWebAppiOS()))\n            ? (\n              <button\n                onClick={() => (camera) ? this.props.updateCamera(false) : this.props.updateCamera(true)}\n                className=\"input-button\"\n                onTouchStart={() => \"\"}\n              >\n                Camera\n              </button>\n            )\n            : (\n              <>\n              <input\n                type=\"file\"\n                id=\"file-input\"\n                accept=\"image/*\"\n                capture=\"camera\"\n                className='input-buttons'\n                onChange={(event) => this.handleImage(event)}\n              />\n              <label\n              type=\"button\"\n              htmlFor=\"file-input\" \n              className=\"input-buttons\"\n              onClick={() => \"\"}\n              onTouchStart={() => \"\"}>\n              Upload File\n              </label>\n              </>\n            )\n        }\n        <button\n          onClick={() => this.props.predict()}\n          className=\"input-button\"\n          onTouchStart={() => \"\"}\n          disabled={!modelLoaded}\n        >\n          Predict\n        </button>\n      </div>\n    )\n\n  }\n}\n\nexport default Input;","import React, { Component } from 'react';\n\nclass PredictionOutput extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  createTable() {\n\n  }\n\n  render() {\n    const { prediction } = this.props;\n    return (\n      prediction\n        ? (\n          <div className={prediction ? \"card\" : \"hidden\"}>\n            <table>\n              <tbody>\n                {prediction.map((value, index) => {\n                  return (\n                    <tr key={index}>\n                      <th className=\"pred-object\">{value.className}</th>\n                      <th className=\"pred-percent\">\n                        {parseFloat(value.probability * 10000 / 100).toFixed(2)}%\n                        </th>\n                    </tr>\n                  )\n                })}\n              </tbody>\n            </table>\n          </div >\n        )\n        : \"\"\n    )\n  }\n}\n\nexport default PredictionOutput;","import React, { Component } from 'react';\nimport './App.css';\nimport doggo from './dog.jpg'\nimport outputClasses from './tfjs/outputClasses.json';\n\nimport * as tf from '@tensorflow/tfjs';\n\nimport ImageContainer from './components/ImageContainer';\nimport Input from './components/Input';\nimport PredictionOutput from './components/PredictionOutput';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      image: doggo,\n      camera: false,\n      modelLoaded: false,\n      prediction: null\n    };\n    this.updateCamera = this.updateCamera.bind(this);\n    this.getImage = this.getImage.bind(this);\n    this.predict = this.predict.bind(this);\n    this.loadModel = this.loadModel.bind(this);\n  }\n\n  componentDidMount() {\n    this.loadModel();\n  }\n\n  updateCamera(data) {\n    this.setState({ camera: data })\n  }\n\n  async loadModel() {\n    this.outputClasses = outputClasses;\n    this.model = await tf.loadLayersModel(\"https://s3-us-west-1.amazonaws.com/wsbuck/tfjs/model.json\");\n    this.setState({ modelLoaded: true });\n    const result = tf.tidy(\n      () => this.model.predict(tf.zeros(\n        [1, 224, 224, 3])));\n    await result.data();\n    result.dispose();\n  }\n\n  getImage(img) {\n    this.setState({ image: img })\n  }\n\n  preprocessImage(img) {\n    let tensor = tf.browser.fromPixels(img)\n      .resizeNearestNeighbor([224, 224])\n      .toFloat();\n\n    let offset = tf.scalar(127.5);\n    return tensor.sub(offset)\n      .div(offset)\n      .expandDims();\n\n  }\n\n  async getTopKClasses(logits, topK) {\n    const values = await logits.data();\n\n    const valuesAndIndices = [];\n    for (let i = 0; i < values.length; i++) {\n      valuesAndIndices.push({ value: values[i], index: i });\n    }\n    valuesAndIndices.sort((a, b) => {\n      return b.value - a.value;\n    });\n    const topkValues = new Float32Array(topK);\n    const topkIndices = new Int32Array(topK);\n    for (let i = 0; i < topK; i++) {\n      topkValues[i] = valuesAndIndices[i].value;\n      topkIndices[i] = valuesAndIndices[i].index;\n    }\n\n    const topClassesAndProbs = [];\n    let percentageSum = 0.00;\n    for (let i = 0; i < topkIndices.length; i++) {\n      percentageSum += topkValues[i];\n      topClassesAndProbs.push({\n        className: this.outputClasses[topkIndices[i]],\n        probability: topkValues[i]\n      })\n    }\n    topClassesAndProbs.push({\n      className: \"Other\",\n      probability: 1.00 - percentageSum\n    });\n    return topClassesAndProbs;\n  }\n\n  async predict() {\n    const imgElement = document.querySelector('img');\n    const logits = tf.tidy(() => {\n      // tf.browser.fromPixels() returns a Tensor from an image element.\n      const img = tf.browser.fromPixels(imgElement)\n        .resizeNearestNeighbor([224, 224])\n        .toFloat();\n      const offset = tf.scalar(127.5);\n      // Normalize the image from [0, 255] to [-1, 1].\n      const normalized = img.sub(offset).div(offset);\n      // Reshape to a single-element batch so we can pass it to predict.\n      const batched = normalized.reshape([1, 224, 224, 3]);\n      // Make a prediction through mobilenet.\n      return this.model.predict(batched);\n    });\n    const classes = await this.getTopKClasses(logits, 3);\n    this.setState({prediction: classes})\n    //console.log(classes);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <ImageContainer\n          image={this.state.image}\n          camera={this.state.camera}\n          getImage={this.getImage}\n        />\n        <PredictionOutput\n          prediction={this.state.prediction}\n        />\n        <Input\n          updateCamera={this.updateCamera}\n          camera={this.state.camera}\n          predict={this.predict}\n          modelLoaded={this.state.modelLoaded}\n          getImage={this.getImage}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\nserviceWorker.register();","module.exports = __webpack_public_path__ + \"static/media/dog.1afd5e79.jpg\";"],"sourceRoot":""}